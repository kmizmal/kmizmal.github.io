{"version":3,"names":["mixins","highlight","data","copying","supportedLanguages","cdnBase","created","hljs","configure","ignoreUnescapedHTML","languages","this","renderers","push","methods","loadLanguage","language","langModule","import","registerLanguage","default","error","console","warn","getLanguageClass","element","classElement","querySelector","classList","find","c","startsWith","replace","codes","document","querySelectorAll","Promise","all","Array","from","map","async","code","preElement","textContent","getLanguage","highlighted","highlightAuto","value","innerHTML","generateCodeHtml","addLineNumbers","addCopyHandler","window","hljsLineNumbersBlock","content","singleLine","copyButton","addEventListener","add","navigator","clipboard","writeText","sleep","textArea","createElement","body","appendChild","select","execCommand","removeChild","remove","ms","resolve","setTimeout"],"sources":["highlight.js.map"],"sourcesContent":["mixins.highlight = {\n  data() {\n    return {\n      copying: false,\n      supportedLanguages: ['bash', 'javascript', 'python', 'html', 'css', 'batch'],\n      cdnBase: 'https://cdn.jsdelivr.net/npm/highlight.js@11.9.0/es/languages/'\n    };\n  },\n  created() {\n    hljs.configure({\n      ignoreUnescapedHTML: true,\n      languages: this.supportedLanguages\n    });\n    this.renderers.push(this.highlight);\n  },\n  methods: {\n    async loadLanguage(language) {\n      try {\n        const langModule = await import(/* webpackIgnore: true */\n        `${this.cdnBase}${language}.min.js`);\n        hljs.registerLanguage(language, langModule.default);\n        return true;\n      } catch (error) {\n        console.warn(`加载语言模块 ${language} 失败:`, error);\n        return false;\n      }\n    },\n    getLanguageClass(element) {\n      const classElement = element.querySelector('code') || element;\n      return [...classElement.classList].find(c => c.startsWith('language-'))?.replace('language-', '') || 'plaintext';\n    },\n    async highlight() {\n      const codes = document.querySelectorAll(\"pre\");\n      await Promise.all(Array.from(codes).map(async preElement => {\n        const code = preElement.textContent;\n        const language = this.getLanguageClass(preElement);\n        if (!hljs.getLanguage(language) && !(await this.loadLanguage(language))) {\n          console.warn(`语言 ${language} 不支持，使用纯文本显示`);\n        }\n        try {\n          const highlighted = hljs.highlightAuto(code, this.supportedLanguages).value;\n          preElement.innerHTML = this.generateCodeHtml(highlighted, language);\n          this.addLineNumbers(preElement);\n          this.addCopyHandler(preElement, code);\n        } catch (error) {\n          console.error('代码高亮失败:', error);\n        }\n      }));\n    },\n    generateCodeHtml(highlighted, language) {\n      return `\n                <code class=\"code-content hljs\">${highlighted}</code>\n                <div class=\"language\">${language}</div>\n                <div class=\"copycode\" aria-label=\"复制代码\">\n                    <i class=\"fa-solid fa-copy\"></i>\n                    <i class=\"fa-solid fa-check\"></i>\n                </div>\n            `;\n    },\n    addLineNumbers(preElement) {\n      if (window.hljsLineNumbersBlock) {\n        const content = preElement.querySelector('.code-content');\n        window.hljsLineNumbersBlock(content, {\n          singleLine: true\n        });\n      }\n    },\n    addCopyHandler(preElement, code) {\n      const copyButton = preElement.querySelector('.copycode');\n      copyButton.addEventListener('click', async () => {\n        if (this.copying) return;\n        this.copying = true;\n        copyButton.classList.add('copied');\n        try {\n          await navigator.clipboard.writeText(code);\n          await this.sleep(1500);\n        } catch (error) {\n          console.error('复制失败:', error);\n          // 降级方案：使用 execCommand\n          const textArea = document.createElement('textarea');\n          textArea.value = code;\n          document.body.appendChild(textArea);\n          textArea.select();\n          document.execCommand('copy');\n          document.body.removeChild(textArea);\n        } finally {\n          copyButton.classList.remove('copied');\n          this.copying = false;\n        }\n      });\n    },\n    sleep(ms) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    }\n  }\n};"],"mappings":"AAAAA,OAAOC,UAAY,CACjBC,KAAI,KACK,CACLC,SAAS,EACTC,mBAAoB,CAAC,OAAQ,aAAc,SAAU,OAAQ,MAAO,SACpEC,QAAS,mEAGb,OAAAC,GACEC,KAAKC,UAAU,CACbC,qBAAqB,EACrBC,UAAWC,KAAKP,qBAElBO,KAAKC,UAAUC,KAAKF,KAAKV,UAC3B,EACAa,QAAS,CACP,kBAAMC,CAAaC,GACjB,IACE,MAAMC,QAAmBC,OACzB,GAAGP,KAAKN,UAAUW,YAElB,OADAT,KAAKY,iBAAiBH,EAAUC,EAAWG,UACpC,CACT,CAAE,MAAOC,GAEP,OADAC,QAAQC,KAAK,UAAUP,QAAgBK,IAChC,CACT,CACF,EACA,gBAAAG,CAAiBC,GACf,MAAMC,EAAeD,EAAQE,cAAc,SAAWF,EACtD,MAAO,IAAIC,EAAaE,WAAWC,KAAKC,GAAKA,EAAEC,WAAW,eAAeC,QAAQ,YAAa,KAAO,WACvG,EACA,eAAM/B,GACJ,MAAMgC,EAAQC,SAASC,iBAAiB,aAClCC,QAAQC,IAAIC,MAAMC,KAAKN,GAAOO,IAAIC,UACtC,MAAMC,EAAOC,EAAWC,YAClB5B,EAAWL,KAAKa,iBAAiBmB,GAClCpC,KAAKsC,YAAY7B,UAAqBL,KAAKI,aAAaC,IAC3DM,QAAQC,KAAK,MAAMP,iBAErB,IACE,MAAM8B,EAAcvC,KAAKwC,cAAcL,EAAM/B,KAAKP,oBAAoB4C,MACtEL,EAAWM,UAAYtC,KAAKuC,iBAAiBJ,EAAa9B,GAC1DL,KAAKwC,eAAeR,GACpBhC,KAAKyC,eAAeT,EAAYD,EAClC,CAAE,MAAOrB,GACPC,QAAQD,MAAM,UAAWA,EAC3B,IAEJ,EACA6B,iBAAgB,CAACJ,EAAa9B,IACrB,qDACqC8B,mDACV9B,uNAOpC,cAAAmC,CAAeR,GACb,GAAIU,OAAOC,qBAAsB,CAC/B,MAAMC,EAAUZ,EAAWhB,cAAc,iBACzC0B,OAAOC,qBAAqBC,EAAS,CACnCC,YAAY,GAEhB,CACF,EACA,cAAAJ,CAAeT,EAAYD,GACzB,MAAMe,EAAad,EAAWhB,cAAc,aAC5C8B,EAAWC,iBAAiB,QAASjB,UACnC,IAAI9B,KAAKR,QAAT,CACAQ,KAAKR,SAAU,EACfsD,EAAW7B,UAAU+B,IAAI,UACzB,UACQC,UAAUC,UAAUC,UAAUpB,SAC9B/B,KAAKoD,MAAM,KACnB,CAAE,MAAO1C,GACPC,QAAQD,MAAM,QAASA,GAEvB,MAAM2C,EAAW9B,SAAS+B,cAAc,YACxCD,EAAShB,MAAQN,EACjBR,SAASgC,KAAKC,YAAYH,GAC1BA,EAASI,SACTlC,SAASmC,YAAY,QACrBnC,SAASgC,KAAKI,YAAYN,EAC5B,CAAE,QACAP,EAAW7B,UAAU2C,OAAO,UAC5B5D,KAAKR,SAAU,CACjB,CAlBwB,GAoB5B,EACA4D,MAAMS,GACG,IAAIpC,QAAQqC,GAAWC,WAAWD,EAASD","ignoreList":[]}